{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jeeva/OneDrive/Documents/Shopwise/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./paypal-script.service\";\nexport class PaymentService {\n  constructor(paypalScriptService) {\n    this.paypalScriptService = paypalScriptService;\n    this.clientId = 'YOUR_CLIENT_ID';\n  }\n  initializePayPalButton(onSuccess, onError) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.paypalScriptService.loadPayPalScript();\n      // Now, paypal should be globally available\n      // paypal.Buttons({\n      //   // Your existing PayPal configuration...\n      // }).render('#paypal-button-container');\n    })();\n  }\n}\n\nPaymentService.ɵfac = function PaymentService_Factory(t) {\n  return new (t || PaymentService)(i0.ɵɵinject(i1.PayPalScriptService));\n};\nPaymentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PaymentService,\n  factory: PaymentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AASA,OAAM,MAAOA,cAAc;EAGzBC,YAAoBC,mBAAwC;IAAxC,wBAAmB,GAAnBA,mBAAmB;IAFtB,aAAQ,GAAG,gBAAgB;EAEmB;EAEzDC,sBAAsB,CAACC,SAAqB,EAAEC,OAAmB;IAAA;IAAA;MACrE,MAAM,KAAI,CAACH,mBAAmB,CAACI,gBAAgB,EAAE;MACjD;MAEA;MACA;MACA;IAAA;EACF;;;AAZWN,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAO,SAAdP,cAAc;EAAAQ,YAFb;AAAM","names":["PaymentService","constructor","paypalScriptService","initializePayPalButton","onSuccess","onError","loadPayPalScript","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\jeeva\\OneDrive\\Documents\\Shopwise\\Frontend\\src\\app\\services\\payment.service.ts"],"sourcesContent":["// payment.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { PayPalScriptService } from './paypal-script.service';\ndeclare const paypal: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaymentService {\n  private readonly clientId = 'YOUR_CLIENT_ID';\n\n  constructor(private paypalScriptService: PayPalScriptService) {}\n\n  async initializePayPalButton(onSuccess: () => void, onError: () => void): Promise<void> {\n    await this.paypalScriptService.loadPayPalScript();\n    // Now, paypal should be globally available\n\n    // paypal.Buttons({\n    //   // Your existing PayPal configuration...\n    // }).render('#paypal-button-container');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}